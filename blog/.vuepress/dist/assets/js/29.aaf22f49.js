(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{486:function(t,v,_){"use strict";_.r(v);var a=_(10),e=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"go-字节数组错误-u0001"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#go-字节数组错误-u0001"}},[t._v("#")]),t._v(" go 字节数组错误：\\u0001")]),t._v(" "),_("p",[t._v("在做 "),_("code",[t._v("压缩字符串")]),t._v(" 这道题时，提交的输出结果十分诡异，如下：")]),t._v(" "),_("p",[t._v("输入：")]),t._v(" "),_("p",[t._v('["a","a","b","b","c","c","c"]')]),t._v(" "),_("p",[t._v("输出：")]),t._v(" "),_("p",[t._v('["a","\\u0002","b","\\u0002","c","\\u0003"]')]),t._v(" "),_("p",[t._v("预期：")]),t._v(" "),_("p",[t._v('["a","2","b","2","c","3"]')]),t._v(" "),_("p",[t._v("可以看到结果中的数字部分是对的，但是多了 \\u000 这部分，这个结果令我百思不得其解，在 ide 中运行时正常的，但在力扣上运行一直都会有 "),_("code",[t._v("\\u000")]),t._v(" ，起初还以为是力扣的问题，在查阅资料以后终于找到了原因所在，是一个比较低级的错误。")]),t._v(" "),_("p",[t._v("大概是力扣会将运行的字节数组转换为字符串，而字符数组转字符串会根据 "),_("code",[t._v("ascii")]),t._v(" 来映射转换，问题来了，我的字节数组里存储的全部都是 1 - 9 的数字，而不是数字对应的 ascii 码，所以在转换后无法输出有效字符，解决的方法也很简单，只要在存储的值上加 '0' 即可（ascii 为48）")]),t._v(" "),_("p",[t._v("比如，原先的字节数组是 [2, 2, 3]，再加 48 以后，变成了 [50, 50, 51]，ascii 50 对应十进制 2，ascii 51 对应十进制 3，此时转换后的结果就是正确的了。")]),t._v(" "),_("Vssue",{attrs:{title:t.$title}})],1)}),[],!1,null,null,null);v.default=e.exports}}]);