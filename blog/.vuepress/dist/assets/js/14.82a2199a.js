(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{443:function(t,s,r){t.exports=r.p+"assets/img/offer11_1.753d47b9.png"},444:function(t,s,r){t.exports=r.p+"assets/img/offer11_err.fa7f5cbe.png"},483:function(t,s,r){"use strict";r.r(s);var a=r(10),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"剑指-offer-11-旋转数组的最小数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#剑指-offer-11-旋转数组的最小数字"}},[t._v("#")]),t._v(" 剑指 Offer 11. 旋转数组的最小数字")]),t._v(" "),a("h2",{attrs:{id:"题目描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[t._v("#")]),t._v(" 题目描述")]),t._v(" "),a("blockquote",[a("p",[t._v("把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。")]),t._v(" "),a("p",[t._v("示例 1：")]),t._v(" "),a("p",[t._v("输入：[3,4,5,1,2]\n输出：1\n示例 2：")]),t._v(" "),a("p",[t._v("输入：[2,2,2,0,1]\n输出：0")])]),t._v(" "),a("p",[t._v("图片来源：https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/mian-shi-ti-11-xuan-zhuan-shu-zu-de-zui-xiao-shu-3/")]),t._v(" "),a("p",[a("img",{attrs:{src:r(443),alt:""}})]),t._v(" "),a("p",[t._v("从上图可以看出来，所谓的旋转数组，实质上是变成了两个有序数组，且左边的有序数组要大于右边的有序数组，所以右边的有序数组的第一个值，就是整个数组中的最小值。")]),t._v(" "),a("p",[t._v("二分查找，是通过每次缩短查找区间来减少查找的次数，但前提是数组必须是有序的，而旋转数组恰好破坏了数组的有序性，但这并不代表旋转数组就不能使用二分查找来解决问题了。")]),t._v(" "),a("h2",{attrs:{id:"思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[t._v("#")]),t._v(" 思路")]),t._v(" "),a("ol",[a("li",[t._v("还是和常规的二分查找一样，先创建两个指针（left 和 right），分别置于数组的第一个数（left）和最后一个数（right），并相加除以二求出中位")]),t._v(" "),a("li",[t._v("接下来判断中位属于哪个有序数组，是左边的还是右边的，具体的判断方法后面会提到")]),t._v(" "),a("li",[t._v("在确定了属于哪个有序数组后，就可以像普通的二分查找一样，去掉一部分的查找区间了，如何去除，后面会提到")]),t._v(" "),a("li",[t._v("不断更新指针，直到两个指针在同一位置")])]),t._v(" "),a("p",[t._v("1.如何判断中位属于左边还是右边？")]),t._v(" "),a("p",[t._v("如果中位值 "),a("strong",[t._v("大于")]),t._v(" right 的值，说明在左边数组\n如果中位值 "),a("strong",[t._v("小于")]),t._v(" right 的值，说明在右边数组")]),t._v(" "),a("p",[t._v("例如：\n[4, 5, 1, 2, 3]，中位值为 1，小于 right 3，所以在左边数组\n[3, 4, 5, 1, 2]，中位值为 5，小于 right 2，所以在右边数组")]),t._v(" "),a("p",[t._v("2.在确定了中位所属数组后，如何缩短查找空间？")]),t._v(" "),a("p",[t._v("因为左数组要大于右数组，所以：")]),t._v(" "),a("p",[t._v("如果中位在左数组，那么可以直接去掉左数组，例如 [4, 5, "),a("strong",[t._v("1")]),t._v(", 2, 3]，左数组 [4, 5] 是要大于右数组 [1, 2, 3] 的，所以可以直接去掉 4, 5 这两个元素。")]),t._v(" "),a("p",[t._v("如果中位在右数组，那么可以去掉其右边的所有元素，因为这些元素是一定比它大的，例如 [5, 1, "),a("strong",[t._v("2")]),t._v(", 3, 4]，中位所处数组为 [1, 2, 3, 4]，它右边的 3 和 4 可以直接去除掉。")]),t._v(" "),a("p",[t._v("一种特殊情况：\n[1, 0, "),a("strong",[t._v("1")]),t._v(", 1, 1]，中位的值和 right 值相等，这时该如何处理呢？参照力扣的题解说法：遇到 "),a("code",[t._v("nums[mid] == nums[right]")]),t._v(" 的时候，不能草率地下定结论最小数字在哪一边，但是可以确定的是，把 "),a("code",[t._v("right")]),t._v(" 舍弃掉，并不影响结果。")]),t._v(" "),a("h2",{attrs:{id:"图解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图解"}},[t._v("#")]),t._v(" 图解")]),t._v(" "),a("p",[t._v("图片来源：https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/mian-shi-ti-11-xuan-zhuan-shu-zu-de-zui-xiao-shu-3/")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Users/zz/WebstormProjects/blog-vuepress/blog/.vuepress/public/offer11_img1.jpg",alt:"offer11_img1"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/Users/zz/WebstormProjects/blog-vuepress/blog/.vuepress/public/offer11_img2.jpg",alt:"offer11_img2"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/Users/zz/WebstormProjects/blog-vuepress/blog/.vuepress/public/offer11_img3.jpg",alt:"offer11_img3"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/Users/zz/WebstormProjects/blog-vuepress/blog/.vuepress/public/offer11_img4.jpg",alt:"offer11_img4"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/Users/zz/WebstormProjects/blog-vuepress/blog/.vuepress/public/offer11_img5.jpg",alt:"offer11_img5"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/Users/zz/WebstormProjects/blog-vuepress/blog/.vuepress/public/offer11_img6.jpg",alt:"offer11_img6"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/Users/zz/WebstormProjects/blog-vuepress/blog/.vuepress/public/offer11_img7.jpg",alt:"offer11_img7"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/Users/zz/WebstormProjects/blog-vuepress/blog/.vuepress/public/offer11_img8.jpg",alt:"offer11_img8"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/Users/zz/WebstormProjects/blog-vuepress/blog/.vuepress/public/offer11_img9.jpg",alt:"offer11_img9"}})]),t._v(" "),a("h2",{attrs:{id:"代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("minArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" right "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在第一个数组")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在第二个")]),t._v("\n            right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            right"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"错误记录-思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误记录-思考"}},[t._v("#")]),t._v(" 错误记录/思考")]),t._v(" "),a("p",[t._v("为什么判断是否在第一个数组，必须用 mid 和 right 比较，而不能和 left 比较？比如 [3, 4, 5, 1, 2]，可以通过 mid > right 得到在第一个数组，但同样也可以用 mid > left 判断出同样的结果。")]),t._v(" "),a("p",[t._v("首先可以确定的是，mid 和 left 比较会出错，比如这个测试用例 [1, 1, 0, 1, 1]，两种比较方式结果如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:r(444),alt:""}})]),t._v(" "),a("p",[t._v("对于这样一种特殊旋转数组 [1, 2, 3, 4, 5] （即旋转了 0 个数），此时 mid 无法确定属于哪个数组，且也不符合之前的"),a("strong",[t._v("左数组大于右数组")]),t._v("的条件，这种情况下，与 right 比较是安全的，这会将其分配到右数组 [3, 4, 5]，并将搜索区间转移到左部分 [1, 2, 3]。")]),t._v(" "),a("p",[t._v("如果与 left 比较，会错误的分配到右数组 [1, 2, 3]，并将这部分从搜索区间中去除，留下 [4, 5]，结果也显然意见是错误的。")]),t._v(" "),a("p",[t._v("综上，要避免与 left 比较。")]),t._v(" "),a("Vssue",{attrs:{title:t.$title}})],1)}),[],!1,null,null,null);s.default=e.exports}}]);